install.packages("sparklyr")
library("sparklyr", lib.loc="D:/Program Files/R/R-3.3.2/library")
spark_connect(192.168.31.21, spark_home = Sys.getenv("SPARK_HOME"), method = c("shell"), app_name = "sparklyr", version = 2.1.0, hadoop_version = 2.7, config = spark_config(), extensions = sparklyr::registered_extensions())
spark_connect(‘192.168.31.21’, spark_home = Sys.getenv("SPARK_HOME"), method = c("shell"), app_name = "sparklyr", version = 2.1.0, hadoop_version = 2.7, config = spark_config(), extensions = sparklyr::registered_extensions())
？spark_connect()
？spark_connect
sc <- spark_connect(master = "spark://192.168.31.21:8080")
sc <- spark_connect(master = "spark://192.168.31.21:8080")
sc <- spark_connect(master = "spark://192.168.31.21:8080")
sc <- spark_connect(master = "spark://192.168.31.21:8080")
sc <- spark_connect(master = "spark://192.168.31.21:8080")
install.packages("data.table")
install.packages("plyr")
install.packages("reshape")
#create a dataset
set.seed(1234)
x1<-1:10000000
x2<-rnorm(10000000)
x3<-rt(10000000,2)
x4<-rf(10000000,2,3)
x5<-rpois(1000000,5)
x6<-sample(letters,10000000,replace = TRUE)
x7<-rchisq(10000000,3)
my.df<-data.frame(x1=x1,x2=x2,x3=x3,
x4=x4,x5=x5,x6=x6,
x7=x7)
write.csv(my.df,'test.csv',row.names = FALSE)
#create a dataset
set.seed(1234)
x1<-1:10000000
x2<-rnorm(10000000)
x3<-rt(10000000,2)
x4<-rf(10000000,2,3)
x5<-rpois(10000000,5)
x6<-sample(letters,10000000,replace = TRUE)
x7<-rchisq(10000000,3)
my.df<-data.frame(x1=x1,x2=x2,x3=x3,
x4=x4,x5=x5,x6=x6,
x7=x7)
write.csv(my.df,'test.csv',row.names = FALSE)
#compare function read.table() and read.csv() of rbase and function fread() of package data.table.
system.time(read.table(file=file.choose(),head=TRUE,sep = ','))
system.time(read.csv(file=file.choose(),head=TRUE,sep = ','))
#compare function read.table() and read.csv() of rbase and function fread() of package data.table.
filepath<-file.choose()
system.time(read.table(file=filepath,head=TRUE,sep = ','))
system.time(read.csv(file=filepath,head=TRUE,sep = ','))
library(data.table)
system.time(fread(input = filepath))
unlink('C:/Users/Lenovo/Desktop/R_notebook/datatable_cache', recursive = TRUE)
set.seed(1234)
x1<-1:10000000
x2<-rnorm(10000000)
x3<-rt(10000000,2)
x4<-rf(10000000,2,3)
x5<-rpois(10000000,5)
x6<-sample(letters,10000000,replace = TRUE)
x7<-rchisq(10000000,3)
my.df<-data.frame(x1=x1,x2=x2,x3=x3,
x4=x4,x5=x5,x6=x6,
x7=x7)
View(my.df)
rm(x1)
rm(x~)
rm(x2)
rm(x3)
rm(x4)
rm(x5)
rm(x6)
rm(x7)
install.packages("sqldf")
#duplicated returns a logical vector indicating which rows of a data.table are duplicates of a row with smaller subscripts.
#unique returns a data.table with duplicated rows removed, by columns specified in by argument. When no by then duplicated rows by all columns are removed.
#example：remove duplicated data between col x5 and col x6 of dataset my.df
df<-my.df
dt<-data.table(my.df)
library(sqldf)
system.time(sqldf('select distinct x5,x6 from df'))
library(data.table)
system.time(unique(dt[,list(x5,x6)], by = c('x5','x6')))
View(df)
View(dt)
rm(my.df)
#function subset Returns subsets of a data.table.
system.time(subset(x = df, x2 >= 1 & x3 <= 0.5 & x6 == 'c' | x7 > 1.2))
system.time(subset(x = dt, x2 >= 1 & x3 <= 0.5 & x6 == 'c' | x7 > 1.2))
#setorder (and setorderv) reorders the rows of a data.table based on the columns (and column order) provided. It reorders the table by reference and is therefore very memory efficient.
library(plyr)
system.time(arrange(my.df, x2, desc(x3), x6))
#setorder (and setorderv) reorders the rows of a data.table based on the columns (and column order) provided. It reorders the table by reference and is therefore very memory efficient.
library(plyr)
system.time(arrange(df, x2, desc(x3), x6))
library(data.table)
system.time(setorder(dt, x2, x3,x6))
#setorder (and setorderv) reorders the rows of a data.table based on the columns (and column order) provided. It reorders the table by reference and is therefore very memory efficient.
library(plyr)
system.time(arrange(df, x2, desc(x3), x6))
library(data.table)
system.time(setorder(dt, x2, x3,x6))
#Grouping calculation
library(sqldf)
system.time(sqldf('select x6, avg(x1) A, min(x2) B,max(x3) C ,max(x5)-min(x5) D from df group by x6'))
library(data.table)
system.time(dt[, list(A = mean(x1), B = min(x2), C = max(x3), D = diff(range(x5))), by = x6])
head(Loblolly)
data1<-Loblolly
data1$logHeight<-log(data1$height)
head(data1)
data2<-Loblolly
data2<-within(data2,{logHeight=log(height)})
head(data2)
data3<-Loblolly
data3<-cbind(data3,with(data3,log(height)))
names(data3)[4]<-'logHeight'
head(data3)
data4<-Loblolly
data4<-transform(data3,logHeight=log(height),powerage=age^2)
head(data4)
data5<-subset(data4,select = -c(logHeight,powerage))
head(data5)
x3=sample(c('a','b','c'),size=1000,replace = TRUE))
data0<-data.frame(x1=rnorm(1000),x2=rt(1000,2,3),
x3=sample(c('a','b','c'),size=1000,replace = TRUE))
data0[,-3]
drop(x0)
drop(data0)
kill(data0)
rm(data0)
#例如，现在想对x1和x2的列进行转换，转换为原来值的平方再对数
data6<-data.frame(x1=rnorm(1000),x2=rt(1000,2,3),
x3=sample(c('a','b','c'),size=1000,replace = TRUE))
data7<-cbin(data6,apply(data6[,-3],2,function(x) log(x^2)))
#例如，现在想对x1和x2的列进行转换，转换为原来值的平方再对数
data6<-data.frame(x1=rnorm(1000),x2=rt(1000,2,3),
x3=sample(c('a','b','c'),size=1000,replace = TRUE))
data7<-cbind(data6,apply(data6[,-3],2,function(x) log(x^2)))
names(data7)[c(4,5)]<-c('trans_x1','trans_x2')
head(data7)
#例如，现在想对x1和x2的列进行转换，转换为原来值的平方再对数
data6<-data.frame(x1=rnorm(1000),x2=rt(1000,2,3),
x3=sample(c('a','b','c'),size=1000,replace = TRUE))
data7<-cbind(data6,apply(data6[,-3],2,function(x) log(x^2)))
names(data7)[c(4,5)]<-c('trans_x1','trans_x2')
head(data7)
data8<-cbind(data6,sapply(data6[-3],function(x) log(x^2)))
names(data8)[c(4,5)]<-c('trans_x1','trans_x2')
head(data8)
#例如，现在想把data9中的x变量重编码，x<13则编码为1，x>=13且x<15则编码为2，剩余的编码为3
data9<-within(data9,{
recode_x=0
recode_x[x < 13] = 1
recode_x[x >= 13 & x < 15] = 2
recode_x[x >= 15] = 3
})
#例如，现在想把data9中的x变量重编码，x<13则编码为1，x>=13且x<15则编码为2，剩余的编码为3
data9<-data.frame(x=rpois(20))
#例如，现在想把data9中的x变量重编码，x<13则编码为1，x>=13且x<15则编码为2，剩余的编码为3
data9<-data.frame(x=rpois(100,20))
data9<-within(data9,{
recode_x=0
recode_x[x < 13] = 1
recode_x[x >= 13 & x < 15] = 2
recode_x[x >= 15] = 3
})
head(data9)
#例如，现在想把data9中的x变量重编码，x<13则编码为1，x>=13且x<15则编码为2，剩余的编码为3
data9<-data.frame(x=rpois(100,15))
data9<-within(data9,{
recode_x=0
recode_x[x < 13] = 1
recode_x[x >= 13 & x < 15] = 2
recode_x[x >= 15] = 3
})
head(data9)
#首先建立两个数据框
df3<-data.frame(x=c('a','b','c','d','d'),y=1:5)
df4<-data.frame(x=c('a','b','d','e'),z=c(6:9))
df3;df4
#首先建立两个数据框
df3<-data.frame(x=c('a','b','c','d','d'),y=1:5)
df4<-data.frame(x=c('a','b','d','e'),z=c(6:9))
df3;df4
# 接下来看一看join函数是如何合并数据框的。
# 左连和右连：
library(plyr)
df5<-join(df3,df4,by='x',type='left')
df5<-join(df3,df4,by='x',type='right')
#首先建立两个数据框
df3<-data.frame(x=c('a','b','c','d','d'),y=1:5)
df4<-data.frame(x=c('a','b','d','e'),z=c(6:9))
df3;df4
# 接下来看一看join函数是如何合并数据框的。
# 左连和右连：
library(plyr)
df5<-join(df3,df4,by='x',type='left')
df6<-join(df3,df4,by='x',type='right')
#首先建立两个数据框
df3<-data.frame(x=c('a','b','c','d','d'),y=1:5)
df4<-data.frame(x=c('a','b','d','e'),z=c(6:9))
df3;df4
# 接下来看一看join函数是如何合并数据框的。
# 左连和右连：
library(plyr)
df5<-join(df3,df4,by='x',type='left')
df6<-join(df3,df4,by='x',type='right')
df5;df6
#首先建立两个数据框
df3<-data.frame(x=c('a','b','c','d','d'),y=1:5)
df4<-data.frame(x=c('a','b','d','e'),z=c(6:9))
df3;df4
# 接下来看一看join函数是如何合并数据框的。
# 左连和右连
library(plyr)
df5<-join(df3,df4,by='x',type='left')
df6<-join(df3,df4,by='x',type='right')
df5;df6
#内连和全连
library(plyr)
df7<-join(df3,df4,by='x',type='inner')
df8<-join(df3,df4,by='x',type='full')
df7;df8
head(Loblolly)
data1<-Loblolly
data1$logHeight<-log(data1$height)
head(data1)
data2<-Loblolly
data2<-within(data2,{logHeight=log(height)})
head(data2)
data3<-Loblolly
data3<-cbind(data3,with(data3,log(height)))
names(data3)[4]<-'logHeight'
head(data3)
data4<-Loblolly
data4<-transform(data3,logHeight=log(height),powerage=age^2)
head(data4)
data5<-subset(data4,select = -c(logHeight,powerage))
head(data5)
#例如，现在想对x1和x2的列进行转换，转换为原来值的平方再对数
data6<-data.frame(x1=rnorm(1000),x2=rt(1000,2,3),
x3=sample(c('a','b','c'),size=1000,replace = TRUE))
data7<-cbind(data6,apply(data6[,-3],2,function(x) log(x^2)))
names(data7)[c(4,5)]<-c('trans_x1','trans_x2')
head(data7)
data8<-cbind(data6,sapply(data6[-3],function(x) log(x^2)))
names(data8)[c(4,5)]<-c('trans_x1','trans_x2')
head(data8)
#例如，现在想把data9中的x变量重编码，x<13则编码为1，x>=13且x<15则编码为2，剩余的编码为3
data9<-data.frame(x=rpois(100,15))
data9<-within(data9,{
recode_x=0
recode_x[x < 13] = 1
recode_x[x >= 13 & x < 15] = 2
recode_x[x >= 15] = 3
})
head(data9)
# join(x, y, by = NULL, type = "left", match = "all")
# 其中x和y是被要合并的数据框；
# by为x和y中的连接字段；
# type为合并类型，有左连、右连、内连和全连四种；
# match用来数据合并过程中重复值的处理，默认情况下不排除重复值，当指定first时，则保留重复值中的第一个。
#首先建立两个数据框
df3<-data.frame(x=c('a','b','c','d','d'),y=1:5)
df4<-data.frame(x=c('a','b','d','e'),z=c(6:9))
df3;df4
# 接下来看一看join函数是如何合并数据框的。
# 左连和右连
library(plyr)
df5<-join(df3,df4,by='x',type='left')
df6<-join(df3,df4,by='x',type='right')
df5;df6
#内连和全连
library(plyr)
df7<-join(df3,df4,by='x',type='inner')
df8<-join(df3,df4,by='x',type='full')
df7;df8
setwd("C:/Users/Lenovo/Desktop/numpy_in_python")
